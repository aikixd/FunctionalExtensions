<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Threading.Tasks;
using Aikixd.FunctionalExtensions.DiscriminatedUnions;

namespace Aikixd.FunctionalExtensions
{

<#

for (int argumentCount = 1; argumentCount <= 7; argumentCount += 1)
{
    var argNames = 
        Enumerable
        .Range(1, argumentCount)
        .Select(x => GetTypeArgumentName(x))
        .ToArray();

    var className =
        "Union<" + 
        argNames
        .Aggregate((aggr, cur) => aggr + ", " + cur) + ">";
    
    // Class declaration
#>  
    public abstract class <#= className #> : IEquatable<<#= className #>>
    {
        
        private readonly object value;
        
<#
    // Constructors
    foreach (var n in argNames)
    {
#>
        public Union(<#= n #> value)
        {
            this.value = value ?? throw new UnionCaseNullException();
        }
<#
    }
#>
        
<#
    // Equals method

    #>
        public bool Equals(<#= className #> other)
        {
            if (other is null)
                return false;
            return this.value.Equals(other.value);
        }

<#
    // GetHashCode method

    #>
        public override int GetHashCode()
        {
            return this.value.GetHashCode();
        }

<#
    // object.Equals override
    #>
        public override bool Equals(object other)
        {
            if (other is <#= className #> o)
                return this.Equals(o);

            return false;
        }

<#
    // Operators
    #>
        public static bool operator == (<#= className #> left, <#= className #> right)
        {
            return left.Equals(right);
        }

        public static bool operator != (<#= className #> left, <#= className #> right)
        {
            return !left.Equals(right);
        }

<#
    // When methods
    for (var i = 1; i <= argNames.Length; i += 1)
    {
        var curTypeArg = argNames[i - 1];
#>

        public TResult When<TResult>(Func<#= "<" + curTypeArg + ", TResult>" #> fn, TResult @default)
        {
            if (this.value is <#= curTypeArg #> x)
                return fn(x);

            return @default;
        }

        public TResult When<TResult>(Func<#= "<" + curTypeArg + ", TResult>" #> fn, Func<TResult> fallback)
        {
            if (this.value is <#= argNames[i - 1] #> x)
                return fn(x);

            return fallback();
        }

        <# // async #>

        public async Task<bool> WhenAsync(Func<#= "<" + curTypeArg + ", Task>" #> fn)
        {
            if (this.value is <#= curTypeArg #> x)
            {
                await fn(x);
                return true;
            }

            return false;
        }

        public async Task<bool> WhenAsync(Func<#= "<" + curTypeArg + ", Task>" #> fn, Func<Task> fallback)
        {
            if (this.value is <#= curTypeArg #> x)
            {
                await fn(x);
                return true;
            }

            await fallback();
            return false;
        }

        public async Task<TResult> WhenAsync<TResult>(Func<#= "<" + curTypeArg + ", Task<TResult>>" #> fn, TResult @default)
        {
            if (this.value is <#= curTypeArg #> x)
                return await fn(x);

            return @default;
        }

        public async Task<TResult> WhenAsync<TResult>(Func<#= "<" + curTypeArg + ", Task<TResult>>" #> fn, Func<Task<TResult>> fallback)
        {
            if (this.value is <#= argNames[i - 1] #> x)
                return await fn(x);

            return await fallback();
        }

        public bool When(Action<#= "<" + curTypeArg + ">" #> action)
        {
            if (this.value is <#= curTypeArg #> x)
            {
                action(x);
                return true;
            }

            return false;
        }

        public bool When(Action<#= "<" + curTypeArg + ">" #> action, Action fallback)
        {
            if (this.value is <#= curTypeArg #> x)
            {
                action(x);
                return true;
            }

            fallback();
            return false;
        }
<#
    }

    // Match methods
#>

        public TResult Match<TResult>(<#= 
            argNames
            .Select((x, i) => new { str = x, i = i + 1 })
            .Select(x => "Func<" + x.str + ", TResult> fn" + x.i)
            .Aggregate((aggr, cur) => aggr + ", " + cur)
        #>)
        {  
            switch (this.value)
            {
		<#
        for (var i = 1; i <= argNames.Length; i += 1)
        {
        #>        case <#= argNames[i - 1] #> x: return fn<#= i #>(x);
        <#
        }
        #> 
            }
            
            throw new InvalidUnionStateException();
        }

        public void Match(<#= 
            argNames
            .Select((x, i) => new { str = x, i = i + 1 })
            .Select(x => "Action<" + x.str + "> action" + x.i)
            .Aggregate((aggr, cur) => aggr + ", " + cur)
        #>)
        {  
            switch (this.value)
            {
		<#
        for (var i = 1; i <= argNames.Length; i += 1)
        {
        #>        case <#= argNames[i - 1] #> x: action<#= i #>(x); break;
        <#
        }
        #> 
                default: throw new InvalidUnionStateException();
            }
        }

        <# // async #>

        public async Task<TResult> MatchAsync<TResult>(<#= 
            argNames
            .Select((x, i) => new { str = x, i = i + 1 })
            .Select(x => "Func<" + x.str + ", Task<TResult>> fn" + x.i)
            .Aggregate((aggr, cur) => aggr + ", " + cur)
        #>)
        {  
            switch (this.value)
            {
		<#
        for (var i = 1; i <= argNames.Length; i += 1)
        {
        #>        case <#= argNames[i - 1] #> x: return await fn<#= i #>(x);
        <#
        }
        #> 
            }
            
            throw new InvalidUnionStateException();
        }

        public async Task MatchAsyncVoid(<#= 
            argNames
            .Select((x, i) => new { str = x, i = i + 1 })
            .Select(x => "Func<" + x.str + ", Task> fn" + x.i)
            .Aggregate((aggr, cur) => aggr + ", " + cur)
        #>)
        {  
            switch (this.value)
            {
		<#
        for (var i = 1; i <= argNames.Length; i += 1)
        {
        #>        case <#= argNames[i - 1] #> x: await fn<#= i #>(x); break;
        <#
        }
        #> 
                default: throw new InvalidUnionStateException();
            }
        }

        <#
        for (var i = 1; i <= argNames.Length; i += 1)
        {
            var typeArgName = argNames[i - 1];
        #>

        public static implicit operator <#= className #>(<#= typeArgName #> obj)
        {
            return TypeUtils<<#= className #>, <#= typeArgName #>>.Instance.CastFn(obj);
        }

        <#
        }
        #> 

        public bool Is<T>()
        {
            return this.value is T;
        }        
<#
    


#>    }
<#
}
#>


}

<#+

private string GetTypeArgumentName(int i)
{
    return "T" + i.ToString();
}

private string GetTypeArgumentName(string i)
{
    return "T" + i;
}

static IEnumerable<IEnumerable<T>>
            GetPermutations<T>(IEnumerable<T> list, int length)
{
    if (length == 1) return list.Select(t => new T[] { t });

    return GetPermutations(list, length - 1)
        .SelectMany(t => list.Where(e => !t.Contains(e)),
            (t1, t2) => t1.Concat(new T[] { t2 }));
}

#>

